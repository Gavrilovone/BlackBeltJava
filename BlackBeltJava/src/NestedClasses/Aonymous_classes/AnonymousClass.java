
package NestedClasses.Aonymous_classes;
/**
 * Анонимный класс полезно использовать тогда когда, нам нужно например имплементировать интерфейс или экстендить како-то класс и что-то изменить, 
 * но разово на ходу, и чтобы не создавать для этого отдельный класс, используется анонимный класс, который можно использовтаь лишь один раз
 * 
 * - Anonymous класс не имеет имени
 * - Anonymous - это "объявлени" класса и одновременное создание объекта
 * - в анонимных классах невозможно написать конструктор(потому что при написании конструктора требуется имя класса)
 * - Анонимный класс может обращаться даже к private элементам внешнего класса(предварительно создав объект этого внешнего класса)
 * Lamda expressions - это краткая форма для написания анонимных классов
 * 
 * понятия анонимных интерфейсов не существует
 * 
 */
public class AnonymousClass {
    public static void main(String[] args) {
        Math m = new Math(){ // это не создание объекта
        /**
         * пишем все то, что писали бы в классе, который имплементирует интерфейс Math
         */
             @Override
            public int doOperation(int a, int b){
                return a+b;
            }
        };// здесь точна запятая потому что все что вв фигурных скобках это все одно выражение, а после каждого выражения должна быть ;
        
        /**
         * это выражение означает, что какой-то класс(у которго нет имени) объект которого m - имплементирует интерфейс Math и оверайдит его метод
         */
        System.out.println(m.doOperation(3, 6)); // 9
    }
}

/**
 * вместо интерфейса может быть и обычный класс и все будет работать так же, только мы  скажем что что какой-то класс(у которго нет имени) объект которого m - экстендит класс и оверайдит его метод
 */
interface Math{
    int doOperation(int a, int b);
}