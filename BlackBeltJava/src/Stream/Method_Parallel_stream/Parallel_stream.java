
package Stream.Method_Parallel_stream;

import java.util.ArrayList;
import java.util.List;

/**
 * Parallel stream это возможность использования нескольких ядер процессора при выполнении каких либо операций со stream
 */
public class Parallel_stream {
    /**
     * Допустим у нас есть какой-то стрим  1,2,3,4,5..1 000 000 000 и нам например необходимо с помощью стрима вычислить произведение его элементов
     * если мы последовательный стрим запускаем, он начинает 1*2, результат умножает на 3 и так до миллиарда
     * если у нас несколько ядер и мы указываем parallel stream, то один процессор например считает от 1 до 250 000 000, второй от 250 000 000 до 500 000 000,
     * третий от 500 000 000 до 750 000 000 , четвертый от 750 000 000 до 1 000 000 000, четыре процессора работают одновременно, тоесть суть такова, выполнение
     * частеф задания и потом объединение их
     */
    public static void main(String[] args) {
        List<Double> list = new ArrayList();
            list.add(10.0);
            list.add(5d);
            list.add((double)1);
            list.add(0.25);
            
           
        
           
        /**
         * использование parallel stream подходит для решения какой нибудь агрегированной функции например нахождение максимума, минимума или среднего 
         * арифмитического и абсолютно не подходит когда наши дествия над элементами напрямую зависят от очередности элементов и самое главное, параллельность
         * надо использовать когда у нас очень много элементов, если элементов мало, то она наоборот навредит, немного увеличив даже время выполнения задания
         * потому что задачу надо поделить потом собрать воедино, на это тоже уходит время
         */
       double sumResult = list.stream().reduce((accum, elem) -> accum+elem).get();
        System.out.println("Сумма = " + sumResult ); // Сумма = 16.25
        
         double sumResult2 = list.parallelStream().reduce((accum, elem) -> accum+elem).get();
        System.out.println("Сумма = " + sumResult2 ); // Сумма = 16.25
        
         double divisionResult = list.stream().reduce((accum, elem) -> accum/elem).get();
        System.out.println("Сумма = " + divisionResult ); // Сумма = 8.0
        
         double divisionResult2 = list.parallelStream().reduce((accum, elem) -> accum/elem).get();
        System.out.println("Сумма = " + divisionResult2 ); // Сумма = 0.5 результат не корректный
        /**
         * в первом примере результат делился на следующее число, а во втором вероятно задача была поделена на 2 части 10/5 и 1/0.25 и после произошло
         * деление первого результата на второй
         */
    }
}
